'use strict';

module.exports = function (app) {
    var todoList = require('./controller'),
        path = require('path'),
        multer = require('multer'),
        storage = multer.diskStorage({
            destination: function (req, file, cb) { // docs
                var d = new Date()
                var date = d.getFullYear()
                if (req.body.tahun) {
                    date = req.body.tahun
                }
                var dir = "docs/" + req.body.mitras[0] + "/" + date
                var mkdirp = require('mkdirp')
                mkdirp(dir, err => cb(err, dir))
            },
            filename: function (req, file, cb) {
                // var temp = req.body.no_dokumen.split('/')
                // var docNum = ''
                // for (var i in temp) {
                //     docNum += temp[i] + "^"
                // }
                // docNum = docNum.substr(0, docNum.length - 1)
                cb(null, file.originalname)
                // var docNum = req.body.no_dokumen.replace(/\//g, '^')
                // cb(null, docNum + path.extname(file.originalname))
            }
        }),
        upload = multer({
            limits: {
                fileSize: 10000000
            },
            fileFilter: function (req, file, cb) {
                var ext = path.extname(file.originalname);
                if (ext !== '.pdf') {
                    return cb(new Error('Only PDF file are allowed'))
                }
                cb(null, true)
            },
            storage: storage
        })

    app.route('/')
        .get(todoList.index);

    app.route('/pic')
        .get(todoList.person);

    app.route('/pic')
        .post(todoList.createPerson);

    app.route('/pic')
        .put(todoList.updatePerson);

    app.route('/pic')
        .delete(todoList.deletePerson);

    app.route('/dokumen')
        .get(todoList.dokumen);

    app.route('/dokumen/:dokumen_id')
        .get(todoList.dokumenDetail);

    app.route('/docs/:dokumen_id')
        .get(todoList.downloadDokumen)

    app.post('/dokumen', function (req, res) {
        upload.single('file')(req, res, function (err) {
            if (err) {
                var response = require('./res')
                return response.fail(err, res)
            }
            const {
                Validator
            } = require('node-input-validator')
            const v = new Validator(req.body, {
                tahun: 'dateFormat:YYYY',
                no_dokumen: 'required',
                judul_dokumen: 'required',
                jenis_dokumen_id: 'required',
                tgl_awal: 'required|date',
                tgl_akhir: 'required|after:'+req.body.tgl_awal,
                mitras: 'required|array|minLength:2'
            })
            v.check().then((matched) => {
                if (!matched) {
                    var fs = require('fs')
                    fs.unlinkSync(req.file.destination + "/" + req.file.filename)
                    res.status(422).send(v.errors)
                } else {
                    todoList.createDokumen(req, res)
                }
            })
        })
    });

    app.put('/dokumen', function (req, res) {
        upload.single('file')(req, res, function (err) {
            if (err) {
                var response = require('./res')
                return response.fail(err, res)
            }
            const {
                Validator
            } = require('node-input-validator')
            const v = new Validator(req.body, {
                no_dokumen: 'required',
                judul_dokumen: 'required',
                jenis_dokumen_id: 'required',
                tgl_awal: 'required|date',
                tgl_akhir: 'required|after:'+req.body.tgl_awal
            })
            v.check().then((matched) => {
                if (!matched) {
                    var fs = require('fs')
                    fs.unlinkSync(req.file.destination + "/" + req.file.filename)
                    res.status(422).send(v.errors)
                } else {
                    todoList.updateDokumen(req, res)
                }
            })
        })
    });

    app.route('/dokumen')
        .delete(todoList.deleteDokumen);

    app.route('/renew/:dokumen_id')
        .post(todoList.renew);

    app.route('/detail')
        .post(todoList.createDokumenDetail);

    app.route('/detail')
        .put(todoList.updateDokumenDetail);

    app.route('/detail')
        .delete(todoList.deleteDokumenDetail);

    app.route('/jenisDok')
        .get(todoList.jenisDok);

    app.route('/jenisMitra')
        .get(todoList.jenisMitra);

    app.route('/kategoriMitra')
        .get(todoList.kategoriMitra);

    app.route('/log')
        .get(todoList.userLog);

    app.route('/mitra')
        .get(todoList.mitra);

    app.route('/mitra')
        .post(todoList.createMitra);

    app.route('/mitra')
        .put(todoList.updateMitra);

    app.route('/mitra')
        .delete(todoList.deleteMitra);

    app.route('/negara')
        .get(todoList.negara);

    app.route('/users')
        .get(todoList.users);

    app.route('/users')
        .put(todoList.updateUsers);

    app.route('/login')
        .post(todoList.login);

    app.route('/logout')
        .post(todoList.logout);

    app.get('/dummy', function (req, res) {
        var path = require('path')
        res.sendFile(path.join(__dirname + "/tests/dummy.html"))
    })

    app.get('/help', function (req, res) {
        // TODO buat halaman untuk panduan route API beserta param yg dibutuhkan
        // var path = require('path')
        // res.sendFile(path.join(__dirname + "/tests/dummy.html"))
    })

    app.all('*', function (req, res) {
        var response = require('./res')
        response.fail("Route unavailable", res)
    })
};